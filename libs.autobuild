

cmake_package 'communication/adrf'
cmake_package 'simulation/mars-plugins/multisim_plugin'

def mars_package(projekt_name, srcDir)
    mars_path="simulation/mars/"

    cmake_package projekt_name do |pkg|
        pkg.srcdir = mars_path
        pkg.post_import do
            pkg.srcdir = srcDir
            Autoproj.manifest.load_package_manifest(pkg.name)
        end
    end
end


in_flavor 'master','next','stable' do
    mars_package("simulation/mars/lib_manager", "simulation/mars/common/lib_manager/")

    mars_package("simulation/mars/cfg_manager", "simulation/mars/common/cfg_manager/")
    mars_package("simulation/mars/main_gui", "simulation/mars/common/gui/main_gui/")
    mars_package("simulation/mars/data_broker" , "simulation/mars/common/data_broker")
    mars_package("simulation/mars/cfg_manager_gui" , "simulation/mars/common/gui/cfg_manager_gui/")
    mars_package("simulation/mars/lib_manager_gui" , "simulation/mars/common/gui/lib_manager_gui/")
    mars_package("simulation/mars/log_console", "simulation/mars/common/gui/log_console/")
    mars_package("simulation/mars/data_broker_gui", "simulation/mars/common/gui/data_broker_gui")
    mars_package("simulation/mars/data_broker_plotter" , "simulation/mars/common/gui/data_broker_plotter")
    mars_package("simulation/mars/utils", "simulation/mars/common/utils")
    mars_package("simulation/mars/interfaces", "simulation/mars/interfaces/")
    mars_package("simulation/mars/sim", "simulation/mars/sim/")
    mars_package("simulation/mars/gui", "simulation/mars/gui")
    mars_package("simulation/mars/graphics", "simulation/mars/graphics")
    mars_package("simulation/mars/app", "simulation/mars/app")
    mars_package("simulation/mars/scene_loader", "simulation/mars/scene_loader")
    mars_package("simulation/mars/connexion_plugin", "simulation/mars/plugins/connexion_plugin")
    mars_package("simulation/mars/constraint_plugin", "simulation/mars/plugins/constraint_plugin")
end


in_flavor 'master','next','stable' do
    cmake_package 'external/minizip'
    autotools_package 'external/ode' do |pkg|
        pkg.depends_on 'libtool'
        pkg.depends_on 'automake'
        pkg.provides "pkgconfig/ode"
        pkg.configureflags <<
            "--enable-double-precision" <<
            "--disable-demos" <<
            "--enable-malloc" <<
            "--with-drawstuff=none" <<
            "CFLAGS=-fPIC -g -Wall" <<
            "CXXFLAGS=-fPIC -g -Wall"
    end

end
